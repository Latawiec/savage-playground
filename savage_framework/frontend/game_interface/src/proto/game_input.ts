// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.2
// source: game_input.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Any } from "./google/protobuf/any";
import Long = require("long");

export const protobufPackage = "game_input";

export interface GameInput {
  clientInput?: ClientInput | undefined;
  roomInput?: RoomInput | undefined;
}

export interface ClientInput {
  senderId: number;
  gameInputMessage: Any | undefined;
}

export interface RoomInput {
  playersJoined: number[];
  playersLeft: number[];
}

function createBaseGameInput(): GameInput {
  return { clientInput: undefined, roomInput: undefined };
}

export const GameInput = {
  encode(message: GameInput, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clientInput !== undefined) {
      ClientInput.encode(message.clientInput, writer.uint32(10).fork()).ldelim();
    }
    if (message.roomInput !== undefined) {
      RoomInput.encode(message.roomInput, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GameInput {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientInput = ClientInput.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roomInput = RoomInput.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameInput {
    return {
      clientInput: isSet(object.clientInput) ? ClientInput.fromJSON(object.clientInput) : undefined,
      roomInput: isSet(object.roomInput) ? RoomInput.fromJSON(object.roomInput) : undefined,
    };
  },

  toJSON(message: GameInput): unknown {
    const obj: any = {};
    if (message.clientInput !== undefined) {
      obj.clientInput = ClientInput.toJSON(message.clientInput);
    }
    if (message.roomInput !== undefined) {
      obj.roomInput = RoomInput.toJSON(message.roomInput);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameInput>, I>>(base?: I): GameInput {
    return GameInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameInput>, I>>(object: I): GameInput {
    const message = createBaseGameInput();
    message.clientInput = (object.clientInput !== undefined && object.clientInput !== null)
      ? ClientInput.fromPartial(object.clientInput)
      : undefined;
    message.roomInput = (object.roomInput !== undefined && object.roomInput !== null)
      ? RoomInput.fromPartial(object.roomInput)
      : undefined;
    return message;
  },
};

function createBaseClientInput(): ClientInput {
  return { senderId: 0, gameInputMessage: undefined };
}

export const ClientInput = {
  encode(message: ClientInput, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.senderId !== 0) {
      writer.uint32(8).uint64(message.senderId);
    }
    if (message.gameInputMessage !== undefined) {
      Any.encode(message.gameInputMessage, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientInput {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.senderId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gameInputMessage = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientInput {
    return {
      senderId: isSet(object.senderId) ? globalThis.Number(object.senderId) : 0,
      gameInputMessage: isSet(object.gameInputMessage) ? Any.fromJSON(object.gameInputMessage) : undefined,
    };
  },

  toJSON(message: ClientInput): unknown {
    const obj: any = {};
    if (message.senderId !== 0) {
      obj.senderId = Math.round(message.senderId);
    }
    if (message.gameInputMessage !== undefined) {
      obj.gameInputMessage = Any.toJSON(message.gameInputMessage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientInput>, I>>(base?: I): ClientInput {
    return ClientInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientInput>, I>>(object: I): ClientInput {
    const message = createBaseClientInput();
    message.senderId = object.senderId ?? 0;
    message.gameInputMessage = (object.gameInputMessage !== undefined && object.gameInputMessage !== null)
      ? Any.fromPartial(object.gameInputMessage)
      : undefined;
    return message;
  },
};

function createBaseRoomInput(): RoomInput {
  return { playersJoined: [], playersLeft: [] };
}

export const RoomInput = {
  encode(message: RoomInput, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.playersJoined) {
      writer.uint64(v);
    }
    writer.ldelim();
    writer.uint32(18).fork();
    for (const v of message.playersLeft) {
      writer.uint64(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RoomInput {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.playersJoined.push(longToNumber(reader.uint64() as Long));

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.playersJoined.push(longToNumber(reader.uint64() as Long));
            }

            continue;
          }

          break;
        case 2:
          if (tag === 16) {
            message.playersLeft.push(longToNumber(reader.uint64() as Long));

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.playersLeft.push(longToNumber(reader.uint64() as Long));
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomInput {
    return {
      playersJoined: globalThis.Array.isArray(object?.playersJoined)
        ? object.playersJoined.map((e: any) => globalThis.Number(e))
        : [],
      playersLeft: globalThis.Array.isArray(object?.playersLeft)
        ? object.playersLeft.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: RoomInput): unknown {
    const obj: any = {};
    if (message.playersJoined?.length) {
      obj.playersJoined = message.playersJoined.map((e) => Math.round(e));
    }
    if (message.playersLeft?.length) {
      obj.playersLeft = message.playersLeft.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomInput>, I>>(base?: I): RoomInput {
    return RoomInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomInput>, I>>(object: I): RoomInput {
    const message = createBaseRoomInput();
    message.playersJoined = object.playersJoined?.map((e) => e) || [];
    message.playersLeft = object.playersLeft?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
