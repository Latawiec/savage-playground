// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.21.12
// source: camera.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Float32Array } from "./types";

export const protobufPackage = "game_renderer";

export interface Camera {
  id: string;
  projection: Float32Array | undefined;
  view: Float32Array | undefined;
}

function createBaseCamera(): Camera {
  return { id: "", projection: undefined, view: undefined };
}

export const Camera = {
  encode(message: Camera, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.projection !== undefined) {
      Float32Array.encode(message.projection, writer.uint32(18).fork()).ldelim();
    }
    if (message.view !== undefined) {
      Float32Array.encode(message.view, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Camera {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCamera();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projection = Float32Array.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.view = Float32Array.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Camera {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      projection: isSet(object.projection) ? Float32Array.fromJSON(object.projection) : undefined,
      view: isSet(object.view) ? Float32Array.fromJSON(object.view) : undefined,
    };
  },

  toJSON(message: Camera): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.projection !== undefined) {
      obj.projection = Float32Array.toJSON(message.projection);
    }
    if (message.view !== undefined) {
      obj.view = Float32Array.toJSON(message.view);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Camera>, I>>(base?: I): Camera {
    return Camera.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Camera>, I>>(object: I): Camera {
    const message = createBaseCamera();
    message.id = object.id ?? "";
    message.projection = (object.projection !== undefined && object.projection !== null)
      ? Float32Array.fromPartial(object.projection)
      : undefined;
    message.view = (object.view !== undefined && object.view !== null)
      ? Float32Array.fromPartial(object.view)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
