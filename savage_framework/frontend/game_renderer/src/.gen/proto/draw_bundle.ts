// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.21.12
// source: draw_bundle.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Texture } from "./types";
import { UniformAttributes } from "./uniform_attributes";
import { VertexAttributes } from "./vertex_attributes";

export const protobufPackage = "game_renderer";

export interface DrawBundle {
  layer?: number | undefined;
  billboard?: boolean | undefined;
  vertexShaderAsset?: string | undefined;
  vertexAttributes?: VertexAttributes | undefined;
  pixelShaderAsset?: string | undefined;
  uniformAttributes?: UniformAttributes | undefined;
  meshAsset?: string | undefined;
  textures: Texture[];
}

function createBaseDrawBundle(): DrawBundle {
  return {
    layer: undefined,
    billboard: undefined,
    vertexShaderAsset: undefined,
    vertexAttributes: undefined,
    pixelShaderAsset: undefined,
    uniformAttributes: undefined,
    meshAsset: undefined,
    textures: [],
  };
}

export const DrawBundle = {
  encode(message: DrawBundle, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.layer !== undefined) {
      writer.uint32(8).uint32(message.layer);
    }
    if (message.billboard !== undefined) {
      writer.uint32(16).bool(message.billboard);
    }
    if (message.vertexShaderAsset !== undefined) {
      writer.uint32(26).string(message.vertexShaderAsset);
    }
    if (message.vertexAttributes !== undefined) {
      VertexAttributes.encode(message.vertexAttributes, writer.uint32(34).fork()).ldelim();
    }
    if (message.pixelShaderAsset !== undefined) {
      writer.uint32(42).string(message.pixelShaderAsset);
    }
    if (message.uniformAttributes !== undefined) {
      UniformAttributes.encode(message.uniformAttributes, writer.uint32(50).fork()).ldelim();
    }
    if (message.meshAsset !== undefined) {
      writer.uint32(58).string(message.meshAsset);
    }
    for (const v of message.textures) {
      Texture.encode(v!, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DrawBundle {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDrawBundle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.layer = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.billboard = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.vertexShaderAsset = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.vertexAttributes = VertexAttributes.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pixelShaderAsset = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.uniformAttributes = UniformAttributes.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.meshAsset = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.textures.push(Texture.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DrawBundle {
    return {
      layer: isSet(object.layer) ? globalThis.Number(object.layer) : undefined,
      billboard: isSet(object.billboard) ? globalThis.Boolean(object.billboard) : undefined,
      vertexShaderAsset: isSet(object.vertexShaderAsset) ? globalThis.String(object.vertexShaderAsset) : undefined,
      vertexAttributes: isSet(object.vertexAttributes) ? VertexAttributes.fromJSON(object.vertexAttributes) : undefined,
      pixelShaderAsset: isSet(object.pixelShaderAsset) ? globalThis.String(object.pixelShaderAsset) : undefined,
      uniformAttributes: isSet(object.uniformAttributes)
        ? UniformAttributes.fromJSON(object.uniformAttributes)
        : undefined,
      meshAsset: isSet(object.meshAsset) ? globalThis.String(object.meshAsset) : undefined,
      textures: globalThis.Array.isArray(object?.textures) ? object.textures.map((e: any) => Texture.fromJSON(e)) : [],
    };
  },

  toJSON(message: DrawBundle): unknown {
    const obj: any = {};
    if (message.layer !== undefined) {
      obj.layer = Math.round(message.layer);
    }
    if (message.billboard !== undefined) {
      obj.billboard = message.billboard;
    }
    if (message.vertexShaderAsset !== undefined) {
      obj.vertexShaderAsset = message.vertexShaderAsset;
    }
    if (message.vertexAttributes !== undefined) {
      obj.vertexAttributes = VertexAttributes.toJSON(message.vertexAttributes);
    }
    if (message.pixelShaderAsset !== undefined) {
      obj.pixelShaderAsset = message.pixelShaderAsset;
    }
    if (message.uniformAttributes !== undefined) {
      obj.uniformAttributes = UniformAttributes.toJSON(message.uniformAttributes);
    }
    if (message.meshAsset !== undefined) {
      obj.meshAsset = message.meshAsset;
    }
    if (message.textures?.length) {
      obj.textures = message.textures.map((e) => Texture.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DrawBundle>, I>>(base?: I): DrawBundle {
    return DrawBundle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DrawBundle>, I>>(object: I): DrawBundle {
    const message = createBaseDrawBundle();
    message.layer = object.layer ?? undefined;
    message.billboard = object.billboard ?? undefined;
    message.vertexShaderAsset = object.vertexShaderAsset ?? undefined;
    message.vertexAttributes = (object.vertexAttributes !== undefined && object.vertexAttributes !== null)
      ? VertexAttributes.fromPartial(object.vertexAttributes)
      : undefined;
    message.pixelShaderAsset = object.pixelShaderAsset ?? undefined;
    message.uniformAttributes = (object.uniformAttributes !== undefined && object.uniformAttributes !== null)
      ? UniformAttributes.fromPartial(object.uniformAttributes)
      : undefined;
    message.meshAsset = object.meshAsset ?? undefined;
    message.textures = object.textures?.map((e) => Texture.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
