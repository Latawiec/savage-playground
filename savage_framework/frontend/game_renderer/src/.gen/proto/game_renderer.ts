// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.21.12
// source: game_renderer.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "game_renderer";

export enum UpdateType {
  Full = 0,
  Increment = 1,
  UNRECOGNIZED = -1,
}

export function updateTypeFromJSON(object: any): UpdateType {
  switch (object) {
    case 0:
    case "Full":
      return UpdateType.Full;
    case 1:
    case "Increment":
      return UpdateType.Increment;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UpdateType.UNRECOGNIZED;
  }
}

export function updateTypeToJSON(object: UpdateType): string {
  switch (object) {
    case UpdateType.Full:
      return "Full";
    case UpdateType.Increment:
      return "Increment";
    case UpdateType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Float32Array {
  values: number[];
}

export interface Uint32Array {
  values: number[];
}

export interface Texture {
  bindOffset: number;
  asset: string;
}

export interface UniformAttributes {
  float: { [key: string]: Float32Array };
  vec2: { [key: string]: Float32Array };
  vec3: { [key: string]: Float32Array };
  vec4: { [key: string]: Float32Array };
  int: { [key: string]: Uint32Array };
  ivec2: { [key: string]: Uint32Array };
  ivec3: { [key: string]: Uint32Array };
  ivec4: { [key: string]: Uint32Array };
  mat4: { [key: string]: Float32Array };
}

export interface UniformAttributes_FloatEntry {
  key: string;
  value: Float32Array | undefined;
}

export interface UniformAttributes_Vec2Entry {
  key: string;
  value: Float32Array | undefined;
}

export interface UniformAttributes_Vec3Entry {
  key: string;
  value: Float32Array | undefined;
}

export interface UniformAttributes_Vec4Entry {
  key: string;
  value: Float32Array | undefined;
}

export interface UniformAttributes_IntEntry {
  key: string;
  value: Uint32Array | undefined;
}

export interface UniformAttributes_Ivec2Entry {
  key: string;
  value: Uint32Array | undefined;
}

export interface UniformAttributes_Ivec3Entry {
  key: string;
  value: Uint32Array | undefined;
}

export interface UniformAttributes_Ivec4Entry {
  key: string;
  value: Uint32Array | undefined;
}

export interface UniformAttributes_Mat4Entry {
  key: string;
  value: Float32Array | undefined;
}

export interface VertexAttributes {
  /** Mandatory */
  vertices: string;
  namedBuffers: { [key: string]: string };
}

export interface VertexAttributes_NamedBuffersEntry {
  key: string;
  value: string;
}

export interface DrawBundle {
  layer?: number | undefined;
  billboard?: boolean | undefined;
  vertexShaderAsset?: string | undefined;
  vertexAttributes?: VertexAttributes | undefined;
  pixelShaderAsset?: string | undefined;
  uniformAttributes?: UniformAttributes | undefined;
  meshAsset?: string | undefined;
  textures: Texture[];
}

export interface SceneElement {
  id: string;
  drawBundle?: DrawBundle | undefined;
}

export interface SceneUpdate {
  type?: UpdateType | undefined;
  sharedAttributes?: UniformAttributes | undefined;
  elements: SceneElement[];
}

function createBaseFloat32Array(): Float32Array {
  return { values: [] };
}

export const Float32Array = {
  encode(message: Float32Array, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.values) {
      writer.float(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Float32Array {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFloat32Array();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.values.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.values.push(reader.float());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Float32Array {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: Float32Array): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Float32Array>, I>>(base?: I): Float32Array {
    return Float32Array.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Float32Array>, I>>(object: I): Float32Array {
    const message = createBaseFloat32Array();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseUint32Array(): Uint32Array {
  return { values: [] };
}

export const Uint32Array = {
  encode(message: Uint32Array, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.values) {
      writer.uint32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Uint32Array {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUint32Array();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.values.push(reader.uint32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.values.push(reader.uint32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Uint32Array {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.Number(e)) : [],
    };
  },

  toJSON(message: Uint32Array): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Uint32Array>, I>>(base?: I): Uint32Array {
    return Uint32Array.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Uint32Array>, I>>(object: I): Uint32Array {
    const message = createBaseUint32Array();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseTexture(): Texture {
  return { bindOffset: 0, asset: "" };
}

export const Texture = {
  encode(message: Texture, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.bindOffset !== 0) {
      writer.uint32(8).uint32(message.bindOffset);
    }
    if (message.asset !== "") {
      writer.uint32(18).string(message.asset);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Texture {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTexture();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.bindOffset = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.asset = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Texture {
    return {
      bindOffset: isSet(object.bindOffset) ? globalThis.Number(object.bindOffset) : 0,
      asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
    };
  },

  toJSON(message: Texture): unknown {
    const obj: any = {};
    if (message.bindOffset !== 0) {
      obj.bindOffset = Math.round(message.bindOffset);
    }
    if (message.asset !== "") {
      obj.asset = message.asset;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Texture>, I>>(base?: I): Texture {
    return Texture.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Texture>, I>>(object: I): Texture {
    const message = createBaseTexture();
    message.bindOffset = object.bindOffset ?? 0;
    message.asset = object.asset ?? "";
    return message;
  },
};

function createBaseUniformAttributes(): UniformAttributes {
  return { float: {}, vec2: {}, vec3: {}, vec4: {}, int: {}, ivec2: {}, ivec3: {}, ivec4: {}, mat4: {} };
}

export const UniformAttributes = {
  encode(message: UniformAttributes, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.float).forEach(([key, value]) => {
      UniformAttributes_FloatEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).ldelim();
    });
    Object.entries(message.vec2).forEach(([key, value]) => {
      UniformAttributes_Vec2Entry.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    Object.entries(message.vec3).forEach(([key, value]) => {
      UniformAttributes_Vec3Entry.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();
    });
    Object.entries(message.vec4).forEach(([key, value]) => {
      UniformAttributes_Vec4Entry.encode({ key: key as any, value }, writer.uint32(34).fork()).ldelim();
    });
    Object.entries(message.int).forEach(([key, value]) => {
      UniformAttributes_IntEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).ldelim();
    });
    Object.entries(message.ivec2).forEach(([key, value]) => {
      UniformAttributes_Ivec2Entry.encode({ key: key as any, value }, writer.uint32(50).fork()).ldelim();
    });
    Object.entries(message.ivec3).forEach(([key, value]) => {
      UniformAttributes_Ivec3Entry.encode({ key: key as any, value }, writer.uint32(58).fork()).ldelim();
    });
    Object.entries(message.ivec4).forEach(([key, value]) => {
      UniformAttributes_Ivec4Entry.encode({ key: key as any, value }, writer.uint32(66).fork()).ldelim();
    });
    Object.entries(message.mat4).forEach(([key, value]) => {
      UniformAttributes_Mat4Entry.encode({ key: key as any, value }, writer.uint32(74).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UniformAttributes {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniformAttributes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = UniformAttributes_FloatEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.float[entry1.key] = entry1.value;
          }
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = UniformAttributes_Vec2Entry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.vec2[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = UniformAttributes_Vec3Entry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.vec3[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = UniformAttributes_Vec4Entry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.vec4[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          const entry5 = UniformAttributes_IntEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.int[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = UniformAttributes_Ivec2Entry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.ivec2[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          const entry7 = UniformAttributes_Ivec3Entry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.ivec3[entry7.key] = entry7.value;
          }
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          const entry8 = UniformAttributes_Ivec4Entry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.ivec4[entry8.key] = entry8.value;
          }
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          const entry9 = UniformAttributes_Mat4Entry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.mat4[entry9.key] = entry9.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniformAttributes {
    return {
      float: isObject(object.float)
        ? Object.entries(object.float).reduce<{ [key: string]: Float32Array }>((acc, [key, value]) => {
          acc[key] = Float32Array.fromJSON(value);
          return acc;
        }, {})
        : {},
      vec2: isObject(object.vec2)
        ? Object.entries(object.vec2).reduce<{ [key: string]: Float32Array }>((acc, [key, value]) => {
          acc[key] = Float32Array.fromJSON(value);
          return acc;
        }, {})
        : {},
      vec3: isObject(object.vec3)
        ? Object.entries(object.vec3).reduce<{ [key: string]: Float32Array }>((acc, [key, value]) => {
          acc[key] = Float32Array.fromJSON(value);
          return acc;
        }, {})
        : {},
      vec4: isObject(object.vec4)
        ? Object.entries(object.vec4).reduce<{ [key: string]: Float32Array }>((acc, [key, value]) => {
          acc[key] = Float32Array.fromJSON(value);
          return acc;
        }, {})
        : {},
      int: isObject(object.int)
        ? Object.entries(object.int).reduce<{ [key: string]: Uint32Array }>((acc, [key, value]) => {
          acc[key] = Uint32Array.fromJSON(value);
          return acc;
        }, {})
        : {},
      ivec2: isObject(object.ivec2)
        ? Object.entries(object.ivec2).reduce<{ [key: string]: Uint32Array }>((acc, [key, value]) => {
          acc[key] = Uint32Array.fromJSON(value);
          return acc;
        }, {})
        : {},
      ivec3: isObject(object.ivec3)
        ? Object.entries(object.ivec3).reduce<{ [key: string]: Uint32Array }>((acc, [key, value]) => {
          acc[key] = Uint32Array.fromJSON(value);
          return acc;
        }, {})
        : {},
      ivec4: isObject(object.ivec4)
        ? Object.entries(object.ivec4).reduce<{ [key: string]: Uint32Array }>((acc, [key, value]) => {
          acc[key] = Uint32Array.fromJSON(value);
          return acc;
        }, {})
        : {},
      mat4: isObject(object.mat4)
        ? Object.entries(object.mat4).reduce<{ [key: string]: Float32Array }>((acc, [key, value]) => {
          acc[key] = Float32Array.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: UniformAttributes): unknown {
    const obj: any = {};
    if (message.float) {
      const entries = Object.entries(message.float);
      if (entries.length > 0) {
        obj.float = {};
        entries.forEach(([k, v]) => {
          obj.float[k] = Float32Array.toJSON(v);
        });
      }
    }
    if (message.vec2) {
      const entries = Object.entries(message.vec2);
      if (entries.length > 0) {
        obj.vec2 = {};
        entries.forEach(([k, v]) => {
          obj.vec2[k] = Float32Array.toJSON(v);
        });
      }
    }
    if (message.vec3) {
      const entries = Object.entries(message.vec3);
      if (entries.length > 0) {
        obj.vec3 = {};
        entries.forEach(([k, v]) => {
          obj.vec3[k] = Float32Array.toJSON(v);
        });
      }
    }
    if (message.vec4) {
      const entries = Object.entries(message.vec4);
      if (entries.length > 0) {
        obj.vec4 = {};
        entries.forEach(([k, v]) => {
          obj.vec4[k] = Float32Array.toJSON(v);
        });
      }
    }
    if (message.int) {
      const entries = Object.entries(message.int);
      if (entries.length > 0) {
        obj.int = {};
        entries.forEach(([k, v]) => {
          obj.int[k] = Uint32Array.toJSON(v);
        });
      }
    }
    if (message.ivec2) {
      const entries = Object.entries(message.ivec2);
      if (entries.length > 0) {
        obj.ivec2 = {};
        entries.forEach(([k, v]) => {
          obj.ivec2[k] = Uint32Array.toJSON(v);
        });
      }
    }
    if (message.ivec3) {
      const entries = Object.entries(message.ivec3);
      if (entries.length > 0) {
        obj.ivec3 = {};
        entries.forEach(([k, v]) => {
          obj.ivec3[k] = Uint32Array.toJSON(v);
        });
      }
    }
    if (message.ivec4) {
      const entries = Object.entries(message.ivec4);
      if (entries.length > 0) {
        obj.ivec4 = {};
        entries.forEach(([k, v]) => {
          obj.ivec4[k] = Uint32Array.toJSON(v);
        });
      }
    }
    if (message.mat4) {
      const entries = Object.entries(message.mat4);
      if (entries.length > 0) {
        obj.mat4 = {};
        entries.forEach(([k, v]) => {
          obj.mat4[k] = Float32Array.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UniformAttributes>, I>>(base?: I): UniformAttributes {
    return UniformAttributes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UniformAttributes>, I>>(object: I): UniformAttributes {
    const message = createBaseUniformAttributes();
    message.float = Object.entries(object.float ?? {}).reduce<{ [key: string]: Float32Array }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Float32Array.fromPartial(value);
      }
      return acc;
    }, {});
    message.vec2 = Object.entries(object.vec2 ?? {}).reduce<{ [key: string]: Float32Array }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Float32Array.fromPartial(value);
      }
      return acc;
    }, {});
    message.vec3 = Object.entries(object.vec3 ?? {}).reduce<{ [key: string]: Float32Array }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Float32Array.fromPartial(value);
      }
      return acc;
    }, {});
    message.vec4 = Object.entries(object.vec4 ?? {}).reduce<{ [key: string]: Float32Array }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Float32Array.fromPartial(value);
      }
      return acc;
    }, {});
    message.int = Object.entries(object.int ?? {}).reduce<{ [key: string]: Uint32Array }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Uint32Array.fromPartial(value);
      }
      return acc;
    }, {});
    message.ivec2 = Object.entries(object.ivec2 ?? {}).reduce<{ [key: string]: Uint32Array }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Uint32Array.fromPartial(value);
      }
      return acc;
    }, {});
    message.ivec3 = Object.entries(object.ivec3 ?? {}).reduce<{ [key: string]: Uint32Array }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Uint32Array.fromPartial(value);
      }
      return acc;
    }, {});
    message.ivec4 = Object.entries(object.ivec4 ?? {}).reduce<{ [key: string]: Uint32Array }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Uint32Array.fromPartial(value);
      }
      return acc;
    }, {});
    message.mat4 = Object.entries(object.mat4 ?? {}).reduce<{ [key: string]: Float32Array }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Float32Array.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseUniformAttributes_FloatEntry(): UniformAttributes_FloatEntry {
  return { key: "", value: undefined };
}

export const UniformAttributes_FloatEntry = {
  encode(message: UniformAttributes_FloatEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Float32Array.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UniformAttributes_FloatEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniformAttributes_FloatEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Float32Array.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniformAttributes_FloatEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Float32Array.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UniformAttributes_FloatEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Float32Array.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UniformAttributes_FloatEntry>, I>>(base?: I): UniformAttributes_FloatEntry {
    return UniformAttributes_FloatEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UniformAttributes_FloatEntry>, I>>(object: I): UniformAttributes_FloatEntry {
    const message = createBaseUniformAttributes_FloatEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Float32Array.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseUniformAttributes_Vec2Entry(): UniformAttributes_Vec2Entry {
  return { key: "", value: undefined };
}

export const UniformAttributes_Vec2Entry = {
  encode(message: UniformAttributes_Vec2Entry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Float32Array.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UniformAttributes_Vec2Entry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniformAttributes_Vec2Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Float32Array.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniformAttributes_Vec2Entry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Float32Array.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UniformAttributes_Vec2Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Float32Array.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UniformAttributes_Vec2Entry>, I>>(base?: I): UniformAttributes_Vec2Entry {
    return UniformAttributes_Vec2Entry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UniformAttributes_Vec2Entry>, I>>(object: I): UniformAttributes_Vec2Entry {
    const message = createBaseUniformAttributes_Vec2Entry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Float32Array.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseUniformAttributes_Vec3Entry(): UniformAttributes_Vec3Entry {
  return { key: "", value: undefined };
}

export const UniformAttributes_Vec3Entry = {
  encode(message: UniformAttributes_Vec3Entry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Float32Array.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UniformAttributes_Vec3Entry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniformAttributes_Vec3Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Float32Array.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniformAttributes_Vec3Entry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Float32Array.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UniformAttributes_Vec3Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Float32Array.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UniformAttributes_Vec3Entry>, I>>(base?: I): UniformAttributes_Vec3Entry {
    return UniformAttributes_Vec3Entry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UniformAttributes_Vec3Entry>, I>>(object: I): UniformAttributes_Vec3Entry {
    const message = createBaseUniformAttributes_Vec3Entry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Float32Array.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseUniformAttributes_Vec4Entry(): UniformAttributes_Vec4Entry {
  return { key: "", value: undefined };
}

export const UniformAttributes_Vec4Entry = {
  encode(message: UniformAttributes_Vec4Entry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Float32Array.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UniformAttributes_Vec4Entry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniformAttributes_Vec4Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Float32Array.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniformAttributes_Vec4Entry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Float32Array.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UniformAttributes_Vec4Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Float32Array.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UniformAttributes_Vec4Entry>, I>>(base?: I): UniformAttributes_Vec4Entry {
    return UniformAttributes_Vec4Entry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UniformAttributes_Vec4Entry>, I>>(object: I): UniformAttributes_Vec4Entry {
    const message = createBaseUniformAttributes_Vec4Entry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Float32Array.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseUniformAttributes_IntEntry(): UniformAttributes_IntEntry {
  return { key: "", value: undefined };
}

export const UniformAttributes_IntEntry = {
  encode(message: UniformAttributes_IntEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Uint32Array.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UniformAttributes_IntEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniformAttributes_IntEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Uint32Array.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniformAttributes_IntEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Uint32Array.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UniformAttributes_IntEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Uint32Array.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UniformAttributes_IntEntry>, I>>(base?: I): UniformAttributes_IntEntry {
    return UniformAttributes_IntEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UniformAttributes_IntEntry>, I>>(object: I): UniformAttributes_IntEntry {
    const message = createBaseUniformAttributes_IntEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Uint32Array.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseUniformAttributes_Ivec2Entry(): UniformAttributes_Ivec2Entry {
  return { key: "", value: undefined };
}

export const UniformAttributes_Ivec2Entry = {
  encode(message: UniformAttributes_Ivec2Entry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Uint32Array.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UniformAttributes_Ivec2Entry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniformAttributes_Ivec2Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Uint32Array.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniformAttributes_Ivec2Entry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Uint32Array.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UniformAttributes_Ivec2Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Uint32Array.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UniformAttributes_Ivec2Entry>, I>>(base?: I): UniformAttributes_Ivec2Entry {
    return UniformAttributes_Ivec2Entry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UniformAttributes_Ivec2Entry>, I>>(object: I): UniformAttributes_Ivec2Entry {
    const message = createBaseUniformAttributes_Ivec2Entry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Uint32Array.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseUniformAttributes_Ivec3Entry(): UniformAttributes_Ivec3Entry {
  return { key: "", value: undefined };
}

export const UniformAttributes_Ivec3Entry = {
  encode(message: UniformAttributes_Ivec3Entry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Uint32Array.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UniformAttributes_Ivec3Entry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniformAttributes_Ivec3Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Uint32Array.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniformAttributes_Ivec3Entry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Uint32Array.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UniformAttributes_Ivec3Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Uint32Array.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UniformAttributes_Ivec3Entry>, I>>(base?: I): UniformAttributes_Ivec3Entry {
    return UniformAttributes_Ivec3Entry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UniformAttributes_Ivec3Entry>, I>>(object: I): UniformAttributes_Ivec3Entry {
    const message = createBaseUniformAttributes_Ivec3Entry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Uint32Array.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseUniformAttributes_Ivec4Entry(): UniformAttributes_Ivec4Entry {
  return { key: "", value: undefined };
}

export const UniformAttributes_Ivec4Entry = {
  encode(message: UniformAttributes_Ivec4Entry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Uint32Array.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UniformAttributes_Ivec4Entry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniformAttributes_Ivec4Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Uint32Array.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniformAttributes_Ivec4Entry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Uint32Array.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UniformAttributes_Ivec4Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Uint32Array.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UniformAttributes_Ivec4Entry>, I>>(base?: I): UniformAttributes_Ivec4Entry {
    return UniformAttributes_Ivec4Entry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UniformAttributes_Ivec4Entry>, I>>(object: I): UniformAttributes_Ivec4Entry {
    const message = createBaseUniformAttributes_Ivec4Entry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Uint32Array.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseUniformAttributes_Mat4Entry(): UniformAttributes_Mat4Entry {
  return { key: "", value: undefined };
}

export const UniformAttributes_Mat4Entry = {
  encode(message: UniformAttributes_Mat4Entry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Float32Array.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UniformAttributes_Mat4Entry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniformAttributes_Mat4Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Float32Array.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniformAttributes_Mat4Entry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Float32Array.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UniformAttributes_Mat4Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Float32Array.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UniformAttributes_Mat4Entry>, I>>(base?: I): UniformAttributes_Mat4Entry {
    return UniformAttributes_Mat4Entry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UniformAttributes_Mat4Entry>, I>>(object: I): UniformAttributes_Mat4Entry {
    const message = createBaseUniformAttributes_Mat4Entry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Float32Array.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseVertexAttributes(): VertexAttributes {
  return { vertices: "", namedBuffers: {} };
}

export const VertexAttributes = {
  encode(message: VertexAttributes, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.vertices !== "") {
      writer.uint32(10).string(message.vertices);
    }
    Object.entries(message.namedBuffers).forEach(([key, value]) => {
      VertexAttributes_NamedBuffersEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VertexAttributes {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVertexAttributes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.vertices = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = VertexAttributes_NamedBuffersEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.namedBuffers[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VertexAttributes {
    return {
      vertices: isSet(object.vertices) ? globalThis.String(object.vertices) : "",
      namedBuffers: isObject(object.namedBuffers)
        ? Object.entries(object.namedBuffers).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: VertexAttributes): unknown {
    const obj: any = {};
    if (message.vertices !== "") {
      obj.vertices = message.vertices;
    }
    if (message.namedBuffers) {
      const entries = Object.entries(message.namedBuffers);
      if (entries.length > 0) {
        obj.namedBuffers = {};
        entries.forEach(([k, v]) => {
          obj.namedBuffers[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VertexAttributes>, I>>(base?: I): VertexAttributes {
    return VertexAttributes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VertexAttributes>, I>>(object: I): VertexAttributes {
    const message = createBaseVertexAttributes();
    message.vertices = object.vertices ?? "";
    message.namedBuffers = Object.entries(object.namedBuffers ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseVertexAttributes_NamedBuffersEntry(): VertexAttributes_NamedBuffersEntry {
  return { key: "", value: "" };
}

export const VertexAttributes_NamedBuffersEntry = {
  encode(message: VertexAttributes_NamedBuffersEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VertexAttributes_NamedBuffersEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVertexAttributes_NamedBuffersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VertexAttributes_NamedBuffersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: VertexAttributes_NamedBuffersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VertexAttributes_NamedBuffersEntry>, I>>(
    base?: I,
  ): VertexAttributes_NamedBuffersEntry {
    return VertexAttributes_NamedBuffersEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VertexAttributes_NamedBuffersEntry>, I>>(
    object: I,
  ): VertexAttributes_NamedBuffersEntry {
    const message = createBaseVertexAttributes_NamedBuffersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseDrawBundle(): DrawBundle {
  return {
    layer: undefined,
    billboard: undefined,
    vertexShaderAsset: undefined,
    vertexAttributes: undefined,
    pixelShaderAsset: undefined,
    uniformAttributes: undefined,
    meshAsset: undefined,
    textures: [],
  };
}

export const DrawBundle = {
  encode(message: DrawBundle, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.layer !== undefined) {
      writer.uint32(8).uint32(message.layer);
    }
    if (message.billboard !== undefined) {
      writer.uint32(16).bool(message.billboard);
    }
    if (message.vertexShaderAsset !== undefined) {
      writer.uint32(26).string(message.vertexShaderAsset);
    }
    if (message.vertexAttributes !== undefined) {
      VertexAttributes.encode(message.vertexAttributes, writer.uint32(34).fork()).ldelim();
    }
    if (message.pixelShaderAsset !== undefined) {
      writer.uint32(42).string(message.pixelShaderAsset);
    }
    if (message.uniformAttributes !== undefined) {
      UniformAttributes.encode(message.uniformAttributes, writer.uint32(50).fork()).ldelim();
    }
    if (message.meshAsset !== undefined) {
      writer.uint32(58).string(message.meshAsset);
    }
    for (const v of message.textures) {
      Texture.encode(v!, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DrawBundle {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDrawBundle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.layer = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.billboard = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.vertexShaderAsset = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.vertexAttributes = VertexAttributes.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pixelShaderAsset = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.uniformAttributes = UniformAttributes.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.meshAsset = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.textures.push(Texture.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DrawBundle {
    return {
      layer: isSet(object.layer) ? globalThis.Number(object.layer) : undefined,
      billboard: isSet(object.billboard) ? globalThis.Boolean(object.billboard) : undefined,
      vertexShaderAsset: isSet(object.vertexShaderAsset) ? globalThis.String(object.vertexShaderAsset) : undefined,
      vertexAttributes: isSet(object.vertexAttributes) ? VertexAttributes.fromJSON(object.vertexAttributes) : undefined,
      pixelShaderAsset: isSet(object.pixelShaderAsset) ? globalThis.String(object.pixelShaderAsset) : undefined,
      uniformAttributes: isSet(object.uniformAttributes)
        ? UniformAttributes.fromJSON(object.uniformAttributes)
        : undefined,
      meshAsset: isSet(object.meshAsset) ? globalThis.String(object.meshAsset) : undefined,
      textures: globalThis.Array.isArray(object?.textures) ? object.textures.map((e: any) => Texture.fromJSON(e)) : [],
    };
  },

  toJSON(message: DrawBundle): unknown {
    const obj: any = {};
    if (message.layer !== undefined) {
      obj.layer = Math.round(message.layer);
    }
    if (message.billboard !== undefined) {
      obj.billboard = message.billboard;
    }
    if (message.vertexShaderAsset !== undefined) {
      obj.vertexShaderAsset = message.vertexShaderAsset;
    }
    if (message.vertexAttributes !== undefined) {
      obj.vertexAttributes = VertexAttributes.toJSON(message.vertexAttributes);
    }
    if (message.pixelShaderAsset !== undefined) {
      obj.pixelShaderAsset = message.pixelShaderAsset;
    }
    if (message.uniformAttributes !== undefined) {
      obj.uniformAttributes = UniformAttributes.toJSON(message.uniformAttributes);
    }
    if (message.meshAsset !== undefined) {
      obj.meshAsset = message.meshAsset;
    }
    if (message.textures?.length) {
      obj.textures = message.textures.map((e) => Texture.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DrawBundle>, I>>(base?: I): DrawBundle {
    return DrawBundle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DrawBundle>, I>>(object: I): DrawBundle {
    const message = createBaseDrawBundle();
    message.layer = object.layer ?? undefined;
    message.billboard = object.billboard ?? undefined;
    message.vertexShaderAsset = object.vertexShaderAsset ?? undefined;
    message.vertexAttributes = (object.vertexAttributes !== undefined && object.vertexAttributes !== null)
      ? VertexAttributes.fromPartial(object.vertexAttributes)
      : undefined;
    message.pixelShaderAsset = object.pixelShaderAsset ?? undefined;
    message.uniformAttributes = (object.uniformAttributes !== undefined && object.uniformAttributes !== null)
      ? UniformAttributes.fromPartial(object.uniformAttributes)
      : undefined;
    message.meshAsset = object.meshAsset ?? undefined;
    message.textures = object.textures?.map((e) => Texture.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSceneElement(): SceneElement {
  return { id: "", drawBundle: undefined };
}

export const SceneElement = {
  encode(message: SceneElement, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.drawBundle !== undefined) {
      DrawBundle.encode(message.drawBundle, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SceneElement {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSceneElement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.drawBundle = DrawBundle.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SceneElement {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      drawBundle: isSet(object.drawBundle) ? DrawBundle.fromJSON(object.drawBundle) : undefined,
    };
  },

  toJSON(message: SceneElement): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.drawBundle !== undefined) {
      obj.drawBundle = DrawBundle.toJSON(message.drawBundle);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SceneElement>, I>>(base?: I): SceneElement {
    return SceneElement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SceneElement>, I>>(object: I): SceneElement {
    const message = createBaseSceneElement();
    message.id = object.id ?? "";
    message.drawBundle = (object.drawBundle !== undefined && object.drawBundle !== null)
      ? DrawBundle.fromPartial(object.drawBundle)
      : undefined;
    return message;
  },
};

function createBaseSceneUpdate(): SceneUpdate {
  return { type: undefined, sharedAttributes: undefined, elements: [] };
}

export const SceneUpdate = {
  encode(message: SceneUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== undefined) {
      writer.uint32(8).int32(message.type);
    }
    if (message.sharedAttributes !== undefined) {
      UniformAttributes.encode(message.sharedAttributes, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.elements) {
      SceneElement.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SceneUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSceneUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sharedAttributes = UniformAttributes.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.elements.push(SceneElement.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SceneUpdate {
    return {
      type: isSet(object.type) ? updateTypeFromJSON(object.type) : undefined,
      sharedAttributes: isSet(object.sharedAttributes)
        ? UniformAttributes.fromJSON(object.sharedAttributes)
        : undefined,
      elements: globalThis.Array.isArray(object?.elements)
        ? object.elements.map((e: any) => SceneElement.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SceneUpdate): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = updateTypeToJSON(message.type);
    }
    if (message.sharedAttributes !== undefined) {
      obj.sharedAttributes = UniformAttributes.toJSON(message.sharedAttributes);
    }
    if (message.elements?.length) {
      obj.elements = message.elements.map((e) => SceneElement.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SceneUpdate>, I>>(base?: I): SceneUpdate {
    return SceneUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SceneUpdate>, I>>(object: I): SceneUpdate {
    const message = createBaseSceneUpdate();
    message.type = object.type ?? undefined;
    message.sharedAttributes = (object.sharedAttributes !== undefined && object.sharedAttributes !== null)
      ? UniformAttributes.fromPartial(object.sharedAttributes)
      : undefined;
    message.elements = object.elements?.map((e) => SceneElement.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
