// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.21.12
// source: components/character_selection.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Any } from "../google/protobuf/any";

export const protobufPackage = "ffxiv_toolkit_components";

export interface FfxivCharacterSelectionInput {
  selectCharacterId?: number | undefined;
  selectRoleId?: number | undefined;
  ready?: boolean | undefined;
  pleaseRepeat?: boolean | undefined;
  internal?: Any | undefined;
}

export interface FfxivCharacterSelection {
  charactersData: FfxivPlayerCharacter[];
  raidRolesData: FfxivPlayerRaidRole[];
  takenRaidRoleIds: number[];
  selectedCharacterId?: number | undefined;
  selectedRoleId?: number | undefined;
  correct?: boolean | undefined;
  userMessage?: string | undefined;
  userWarning?: string | undefined;
  userError?: string | undefined;
  internal?: Any | undefined;
}

export interface FfxivPlayerCharacter {
  id: number;
  name: string;
  avatarAsset: string;
  description: string;
  job: FfxivPlayerJob | undefined;
}

export interface FfxivPlayerRaidRole {
  id: number;
  name: string;
  nameShort: string;
  class: string;
}

export interface FfxivPlayerJob {
  id: number;
  name: string;
  nameShort: string;
  class: string;
  iconAsset: string;
  description: string;
  fitRaidRoleIds: number[];
}

function createBaseFfxivCharacterSelectionInput(): FfxivCharacterSelectionInput {
  return {
    selectCharacterId: undefined,
    selectRoleId: undefined,
    ready: undefined,
    pleaseRepeat: undefined,
    internal: undefined,
  };
}

export const FfxivCharacterSelectionInput = {
  encode(message: FfxivCharacterSelectionInput, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.selectCharacterId !== undefined) {
      writer.uint32(8).uint64(message.selectCharacterId);
    }
    if (message.selectRoleId !== undefined) {
      writer.uint32(16).uint64(message.selectRoleId);
    }
    if (message.ready !== undefined) {
      writer.uint32(80).bool(message.ready);
    }
    if (message.pleaseRepeat !== undefined) {
      writer.uint32(160).bool(message.pleaseRepeat);
    }
    if (message.internal !== undefined) {
      Any.encode(message.internal, writer.uint32(722).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FfxivCharacterSelectionInput {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFfxivCharacterSelectionInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.selectCharacterId = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.selectRoleId = longToNumber(reader.uint64() as Long);
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.ready = reader.bool();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.pleaseRepeat = reader.bool();
          continue;
        case 90:
          if (tag !== 722) {
            break;
          }

          message.internal = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FfxivCharacterSelectionInput {
    return {
      selectCharacterId: isSet(object.selectCharacterId) ? globalThis.Number(object.selectCharacterId) : undefined,
      selectRoleId: isSet(object.selectRoleId) ? globalThis.Number(object.selectRoleId) : undefined,
      ready: isSet(object.ready) ? globalThis.Boolean(object.ready) : undefined,
      pleaseRepeat: isSet(object.pleaseRepeat) ? globalThis.Boolean(object.pleaseRepeat) : undefined,
      internal: isSet(object.internal) ? Any.fromJSON(object.internal) : undefined,
    };
  },

  toJSON(message: FfxivCharacterSelectionInput): unknown {
    const obj: any = {};
    if (message.selectCharacterId !== undefined) {
      obj.selectCharacterId = Math.round(message.selectCharacterId);
    }
    if (message.selectRoleId !== undefined) {
      obj.selectRoleId = Math.round(message.selectRoleId);
    }
    if (message.ready !== undefined) {
      obj.ready = message.ready;
    }
    if (message.pleaseRepeat !== undefined) {
      obj.pleaseRepeat = message.pleaseRepeat;
    }
    if (message.internal !== undefined) {
      obj.internal = Any.toJSON(message.internal);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FfxivCharacterSelectionInput>, I>>(base?: I): FfxivCharacterSelectionInput {
    return FfxivCharacterSelectionInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FfxivCharacterSelectionInput>, I>>(object: I): FfxivCharacterSelectionInput {
    const message = createBaseFfxivCharacterSelectionInput();
    message.selectCharacterId = object.selectCharacterId ?? undefined;
    message.selectRoleId = object.selectRoleId ?? undefined;
    message.ready = object.ready ?? undefined;
    message.pleaseRepeat = object.pleaseRepeat ?? undefined;
    message.internal = (object.internal !== undefined && object.internal !== null)
      ? Any.fromPartial(object.internal)
      : undefined;
    return message;
  },
};

function createBaseFfxivCharacterSelection(): FfxivCharacterSelection {
  return {
    charactersData: [],
    raidRolesData: [],
    takenRaidRoleIds: [],
    selectedCharacterId: undefined,
    selectedRoleId: undefined,
    correct: undefined,
    userMessage: undefined,
    userWarning: undefined,
    userError: undefined,
    internal: undefined,
  };
}

export const FfxivCharacterSelection = {
  encode(message: FfxivCharacterSelection, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.charactersData) {
      FfxivPlayerCharacter.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.raidRolesData) {
      FfxivPlayerRaidRole.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    writer.uint32(82).fork();
    for (const v of message.takenRaidRoleIds) {
      writer.uint64(v);
    }
    writer.ldelim();
    if (message.selectedCharacterId !== undefined) {
      writer.uint32(160).uint64(message.selectedCharacterId);
    }
    if (message.selectedRoleId !== undefined) {
      writer.uint32(168).uint64(message.selectedRoleId);
    }
    if (message.correct !== undefined) {
      writer.uint32(240).bool(message.correct);
    }
    if (message.userMessage !== undefined) {
      writer.uint32(250).string(message.userMessage);
    }
    if (message.userWarning !== undefined) {
      writer.uint32(258).string(message.userWarning);
    }
    if (message.userError !== undefined) {
      writer.uint32(266).string(message.userError);
    }
    if (message.internal !== undefined) {
      Any.encode(message.internal, writer.uint32(722).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FfxivCharacterSelection {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFfxivCharacterSelection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.charactersData.push(FfxivPlayerCharacter.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.raidRolesData.push(FfxivPlayerRaidRole.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag === 80) {
            message.takenRaidRoleIds.push(longToNumber(reader.uint64() as Long));

            continue;
          }

          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.takenRaidRoleIds.push(longToNumber(reader.uint64() as Long));
            }

            continue;
          }

          break;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.selectedCharacterId = longToNumber(reader.uint64() as Long);
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.selectedRoleId = longToNumber(reader.uint64() as Long);
          continue;
        case 30:
          if (tag !== 240) {
            break;
          }

          message.correct = reader.bool();
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.userMessage = reader.string();
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.userWarning = reader.string();
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.userError = reader.string();
          continue;
        case 90:
          if (tag !== 722) {
            break;
          }

          message.internal = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FfxivCharacterSelection {
    return {
      charactersData: globalThis.Array.isArray(object?.charactersData)
        ? object.charactersData.map((e: any) => FfxivPlayerCharacter.fromJSON(e))
        : [],
      raidRolesData: globalThis.Array.isArray(object?.raidRolesData)
        ? object.raidRolesData.map((e: any) => FfxivPlayerRaidRole.fromJSON(e))
        : [],
      takenRaidRoleIds: globalThis.Array.isArray(object?.takenRaidRoleIds)
        ? object.takenRaidRoleIds.map((e: any) => globalThis.Number(e))
        : [],
      selectedCharacterId: isSet(object.selectedCharacterId)
        ? globalThis.Number(object.selectedCharacterId)
        : undefined,
      selectedRoleId: isSet(object.selectedRoleId) ? globalThis.Number(object.selectedRoleId) : undefined,
      correct: isSet(object.correct) ? globalThis.Boolean(object.correct) : undefined,
      userMessage: isSet(object.userMessage) ? globalThis.String(object.userMessage) : undefined,
      userWarning: isSet(object.userWarning) ? globalThis.String(object.userWarning) : undefined,
      userError: isSet(object.userError) ? globalThis.String(object.userError) : undefined,
      internal: isSet(object.internal) ? Any.fromJSON(object.internal) : undefined,
    };
  },

  toJSON(message: FfxivCharacterSelection): unknown {
    const obj: any = {};
    if (message.charactersData?.length) {
      obj.charactersData = message.charactersData.map((e) => FfxivPlayerCharacter.toJSON(e));
    }
    if (message.raidRolesData?.length) {
      obj.raidRolesData = message.raidRolesData.map((e) => FfxivPlayerRaidRole.toJSON(e));
    }
    if (message.takenRaidRoleIds?.length) {
      obj.takenRaidRoleIds = message.takenRaidRoleIds.map((e) => Math.round(e));
    }
    if (message.selectedCharacterId !== undefined) {
      obj.selectedCharacterId = Math.round(message.selectedCharacterId);
    }
    if (message.selectedRoleId !== undefined) {
      obj.selectedRoleId = Math.round(message.selectedRoleId);
    }
    if (message.correct !== undefined) {
      obj.correct = message.correct;
    }
    if (message.userMessage !== undefined) {
      obj.userMessage = message.userMessage;
    }
    if (message.userWarning !== undefined) {
      obj.userWarning = message.userWarning;
    }
    if (message.userError !== undefined) {
      obj.userError = message.userError;
    }
    if (message.internal !== undefined) {
      obj.internal = Any.toJSON(message.internal);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FfxivCharacterSelection>, I>>(base?: I): FfxivCharacterSelection {
    return FfxivCharacterSelection.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FfxivCharacterSelection>, I>>(object: I): FfxivCharacterSelection {
    const message = createBaseFfxivCharacterSelection();
    message.charactersData = object.charactersData?.map((e) => FfxivPlayerCharacter.fromPartial(e)) || [];
    message.raidRolesData = object.raidRolesData?.map((e) => FfxivPlayerRaidRole.fromPartial(e)) || [];
    message.takenRaidRoleIds = object.takenRaidRoleIds?.map((e) => e) || [];
    message.selectedCharacterId = object.selectedCharacterId ?? undefined;
    message.selectedRoleId = object.selectedRoleId ?? undefined;
    message.correct = object.correct ?? undefined;
    message.userMessage = object.userMessage ?? undefined;
    message.userWarning = object.userWarning ?? undefined;
    message.userError = object.userError ?? undefined;
    message.internal = (object.internal !== undefined && object.internal !== null)
      ? Any.fromPartial(object.internal)
      : undefined;
    return message;
  },
};

function createBaseFfxivPlayerCharacter(): FfxivPlayerCharacter {
  return { id: 0, name: "", avatarAsset: "", description: "", job: undefined };
}

export const FfxivPlayerCharacter = {
  encode(message: FfxivPlayerCharacter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.avatarAsset !== "") {
      writer.uint32(26).string(message.avatarAsset);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.job !== undefined) {
      FfxivPlayerJob.encode(message.job, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FfxivPlayerCharacter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFfxivPlayerCharacter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.avatarAsset = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.job = FfxivPlayerJob.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FfxivPlayerCharacter {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      avatarAsset: isSet(object.avatarAsset) ? globalThis.String(object.avatarAsset) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      job: isSet(object.job) ? FfxivPlayerJob.fromJSON(object.job) : undefined,
    };
  },

  toJSON(message: FfxivPlayerCharacter): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.avatarAsset !== "") {
      obj.avatarAsset = message.avatarAsset;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.job !== undefined) {
      obj.job = FfxivPlayerJob.toJSON(message.job);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FfxivPlayerCharacter>, I>>(base?: I): FfxivPlayerCharacter {
    return FfxivPlayerCharacter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FfxivPlayerCharacter>, I>>(object: I): FfxivPlayerCharacter {
    const message = createBaseFfxivPlayerCharacter();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.avatarAsset = object.avatarAsset ?? "";
    message.description = object.description ?? "";
    message.job = (object.job !== undefined && object.job !== null)
      ? FfxivPlayerJob.fromPartial(object.job)
      : undefined;
    return message;
  },
};

function createBaseFfxivPlayerRaidRole(): FfxivPlayerRaidRole {
  return { id: 0, name: "", nameShort: "", class: "" };
}

export const FfxivPlayerRaidRole = {
  encode(message: FfxivPlayerRaidRole, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.nameShort !== "") {
      writer.uint32(26).string(message.nameShort);
    }
    if (message.class !== "") {
      writer.uint32(34).string(message.class);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FfxivPlayerRaidRole {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFfxivPlayerRaidRole();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nameShort = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.class = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FfxivPlayerRaidRole {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      nameShort: isSet(object.nameShort) ? globalThis.String(object.nameShort) : "",
      class: isSet(object.class) ? globalThis.String(object.class) : "",
    };
  },

  toJSON(message: FfxivPlayerRaidRole): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.nameShort !== "") {
      obj.nameShort = message.nameShort;
    }
    if (message.class !== "") {
      obj.class = message.class;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FfxivPlayerRaidRole>, I>>(base?: I): FfxivPlayerRaidRole {
    return FfxivPlayerRaidRole.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FfxivPlayerRaidRole>, I>>(object: I): FfxivPlayerRaidRole {
    const message = createBaseFfxivPlayerRaidRole();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.nameShort = object.nameShort ?? "";
    message.class = object.class ?? "";
    return message;
  },
};

function createBaseFfxivPlayerJob(): FfxivPlayerJob {
  return { id: 0, name: "", nameShort: "", class: "", iconAsset: "", description: "", fitRaidRoleIds: [] };
}

export const FfxivPlayerJob = {
  encode(message: FfxivPlayerJob, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.nameShort !== "") {
      writer.uint32(26).string(message.nameShort);
    }
    if (message.class !== "") {
      writer.uint32(34).string(message.class);
    }
    if (message.iconAsset !== "") {
      writer.uint32(42).string(message.iconAsset);
    }
    if (message.description !== "") {
      writer.uint32(50).string(message.description);
    }
    writer.uint32(58).fork();
    for (const v of message.fitRaidRoleIds) {
      writer.uint64(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FfxivPlayerJob {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFfxivPlayerJob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nameShort = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.class = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.iconAsset = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag === 56) {
            message.fitRaidRoleIds.push(longToNumber(reader.uint64() as Long));

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.fitRaidRoleIds.push(longToNumber(reader.uint64() as Long));
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FfxivPlayerJob {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      nameShort: isSet(object.nameShort) ? globalThis.String(object.nameShort) : "",
      class: isSet(object.class) ? globalThis.String(object.class) : "",
      iconAsset: isSet(object.iconAsset) ? globalThis.String(object.iconAsset) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      fitRaidRoleIds: globalThis.Array.isArray(object?.fitRaidRoleIds)
        ? object.fitRaidRoleIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: FfxivPlayerJob): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.nameShort !== "") {
      obj.nameShort = message.nameShort;
    }
    if (message.class !== "") {
      obj.class = message.class;
    }
    if (message.iconAsset !== "") {
      obj.iconAsset = message.iconAsset;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.fitRaidRoleIds?.length) {
      obj.fitRaidRoleIds = message.fitRaidRoleIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FfxivPlayerJob>, I>>(base?: I): FfxivPlayerJob {
    return FfxivPlayerJob.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FfxivPlayerJob>, I>>(object: I): FfxivPlayerJob {
    const message = createBaseFfxivPlayerJob();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.nameShort = object.nameShort ?? "";
    message.class = object.class ?? "";
    message.iconAsset = object.iconAsset ?? "";
    message.description = object.description ?? "";
    message.fitRaidRoleIds = object.fitRaidRoleIds?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
